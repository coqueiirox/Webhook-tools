import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Date;

public class WebhookSender extends JFrame {
    private JTextField webhookTextField;
    private JTextArea logTextArea;
    private JTextArea spamTextArea;
    private JTextArea singleTextArea;

    private String webhookUrl;
    private boolean isSpamming = false;

    public WebhookSender() {
        setTitle("Webhook Tools By Bro hug");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        JTabbedPane tabbedPane = new JTabbedPane();

        JPanel mainPanel = new JPanel(new FlowLayout());
        JPanel spamPanel = new JPanel(new BorderLayout());
        JPanel singlePanel = new JPanel(new BorderLayout());
        JPanel webhookPanel = new JPanel(new FlowLayout());

        JLabel webhookLabel = new JLabel("Webhook URL:");
        webhookTextField = new JTextField(20);
        webhookTextField.setPreferredSize(new Dimension(300, 25));

        JButton applyWebhookButton = new JButton("Apply");
        applyWebhookButton.setPreferredSize(new Dimension(120, 25));
        applyWebhookButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                webhookUrl = webhookTextField.getText();
                if (isValidWebhook(webhookUrl)) {
                    JOptionPane.showMessageDialog(null, "Connected to WebHook");
                } else if (webhookUrl.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Webhook not found");
                } else {
                    JOptionPane.showMessageDialog(null, "Webhook is Invalid");
                }
                System.out.println("Webhook aplicado: " + webhookUrl);
            }
        });

        webhookPanel.add(webhookLabel);
        webhookPanel.add(webhookTextField);
        webhookPanel.add(applyWebhookButton);

        mainPanel.add(webhookPanel);

        spamTextArea = new JTextArea();
        spamTextArea.setEditable(false);
        spamTextArea.setPreferredSize(new Dimension(400, 200));

        JTextField spamTextField = new JTextField(20);
        spamTextField.setPreferredSize(new Dimension(300, 25));

        JButton spamButton = new JButton("Start Spam");
        spamButton.setPreferredSize(new Dimension(120, 25));
        spamButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (!isSpamming) {
                    isSpamming = true;
                    spamButton.setText("Stop Spam");
                    new Thread(new Runnable() {
                        @Override
                        public void run() {
                            String message = spamTextField.getText();
                            while (isSpamming) {
                                try {
                                    sendWebhookMessage(message);
                                    Thread.sleep(10); // Envia rapidamente (pode ajustar o intervalo conforme necessário)
                                } catch (InterruptedException | IOException ex) {
                                    System.err.println("Erro ao enviar mensagem para o webhook: " + ex.getMessage());
                                }
                            }
                        }
                    }).start();
                } else {
                    isSpamming = false;
                    spamButton.setText("Start Spam");
                }
            }
        });

        spamPanel.add(spamTextField, BorderLayout.CENTER);
        spamPanel.add(spamButton, BorderLayout.EAST);
        spamPanel.add(spamTextArea, BorderLayout.SOUTH);

        singleTextArea = new JTextArea();
        singleTextArea.setEditable(true);
        singleTextArea.setPreferredSize(new Dimension(400, 200));
        singleTextArea.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    e.consume(); 
                    String message = singleTextArea.getText();
                    try {
                        sendWebhookMessage(message);
                        singleTextArea.setText(""); // Limpar o texto da caixa de texto
                    } catch (IOException ex) {
                        System.err.println("Erro ao enviar mensagem para o webhook: " + ex.getMessage());
                    }
                }
            }
        });

        JButton sendButton = new JButton("Send");
        sendButton.setPreferredSize(new Dimension(120, 25));
        sendButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String message = singleTextArea.getText();
                try {
                    sendWebhookMessage(message);
                    singleTextArea.setText(""); 
                } catch (IOException ex) {
                    System.err.println("Erro ao enviar mensagem para o webhook: " + ex.getMessage());
                }
            }
        });

        JPanel buttonPanel = new JPanel(new FlowLayout());
        buttonPanel.add(sendButton);

        singlePanel.add(singleTextArea, BorderLayout.CENTER);
        singlePanel.add(buttonPanel, BorderLayout.SOUTH);

        tabbedPane.addTab("Main", mainPanel);
        tabbedPane.addTab("Spam", spamPanel);
        tabbedPane.addTab("Single", singlePanel);

        add(tabbedPane, BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null); 
        setVisible(false);

        showCustomMessage();

        // Adiciona hook de encerramento
        Runtime.getRuntime().addShutdownHook(new Thread(this::disconnectWebhook));
    }

    private void showCustomMessage() {
        JOptionPane optionPane = new JOptionPane();
        optionPane.setMessage("https://discord.gg/7mGM3pRFu6");
        optionPane.setMessageType(JOptionPane.INFORMATION_MESSAGE);

        JDialog dialog = optionPane.createDialog(null, "Coded by bro hug");
        dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);

        dialog.setContentPane(optionPane);
        dialog.setModal(true);
        dialog.pack();

        JButton okButton = new JButton("OK");
        okButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                dialog.dispose();
                setVisible(true);
            }
        });

        optionPane.setOptions(new Object[]{okButton}); // Substituir os botões padrão pelo botão personalizado

        dialog.setVisible(true);
    }

    private boolean isValidWebhook(String webhook) {
        return !webhook.isEmpty();
    }

    private void sendWebhookMessage(String message) throws IOException {
        if (webhookUrl == null || webhookUrl.isEmpty()) {
            System.err.println("Nenhum webhook selecionado. Por favor, aplique o webhook antes de enviar a mensagem.");
            return;
        }

        URL url = new URL(webhookUrl);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("POST");
        connection.setRequestProperty("Content-Type", "application/json");
        connection.setDoOutput(true);

        String requestBody = "{\"content\": \"" + message + "\"}";

        try (OutputStream outputStream = connection.getOutputStream()) {
            outputStream.write(requestBody.getBytes());
            outputStream.flush();
        }

        int responseCode = connection.getResponseCode();

        if (responseCode == HttpURLConnection.HTTP_OK) {
            System.out.println("Mensagem enviada para o webhook com sucesso!");

            addMessageToSpamLog("Você", message);
        } else {
            System.err.println("Erro ao enviar mensagem para o webhook. Código de resposta: " + responseCode);
        }

        connection.disconnect();
    }

    private void addMessageToSpamLog(String username, String message) {
        SimpleDateFormat dateFormat = new SimpleDateFormat("HH:mm:ss");
        String timestamp = dateFormat.format(new Date());

        String logMessage = "[" + timestamp + "] " + username + ": " + message + "\n";
        spamTextArea.append(logMessage);
        spamTextArea.setCaretPosition(spamTextArea.getDocument().getLength());
    }

    private void disconnectWebhook() {
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                new WebhookSender().setVisible(true);
            }
        });
    }
}
